//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: inc_sh4_pc_textures.bt
//   Authors: Laurynas Zubavičius (Sparagas)
//            Rodolfo Nuñez (roocker666)
//   Purpose: Silent Hill 4: The Room (Microsoft - Windows)
//  Category: Include file
//------------------------------------------------

void sh4_pc_textures() {

    struct PcImgHdr {
        ubyte  unk_0[32];
        uint32 w;
        uint32 h;
        enum {
            rgba = 21,
            DXT1 = 827611204,
            DXT3 = 861165636,
            DXT5 = 894720068
        } img_fmt;
        uint32 num_mip;        // including original image
        uint32 len_mip[7];
        uint32 unk_num;        // it is not num_mip_dat
        uint32 ofs_mip_dat[7]; // counting from DXTHdr list
        uint16 unk;
        uint16 unk;
    };

    OffsetSetStart(OffsetGetStart() + ofs_ps2_img_pal_hdr[0]);
    struct {
        local uint16 i;
        for (i = 0; i < num_img_idx; i++) {
            FSeek(ps2_img_pal_hdr.ps2_img_pal_hdr[i].ofs + 16 * i); // counting from hdr[i]
            struct {
                local uint32 j;
                for (j = 0; j < ps2_img_pal_hdr.ps2_img_pal_hdr[i].num_pal; j++)
                    PcImgHdr pc_img_pal_hdr;
            } pc_img_hdr;
        }
    } pc_img_hdr;


    struct PcImgMipDat {
        ubyte img_dat[pc_img_hdr.pc_img_hdr[i].pc_img_pal_hdr[j].len_mip[k]];
    };

    OffsetSetStart(OffsetGetStart() + ps2_img_pal_hdr.ps2_img_pal_hdr[0].ofs);
    FSeek(pc_img_hdr.pc_img_hdr[0].pc_img_pal_hdr[0].ofs_mip_dat[0]);
    struct {
        local uint32 i;
        for (i = 0; i < num_img_idx; i++) {
            FSeek(pc_img_hdr.pc_img_hdr[i].pc_img_pal_hdr[0].ofs_mip_dat[0] + (112 * i));
            struct {
                local uint32  j;
                for (j = 0; j < ps2_img_pal_hdr.ps2_img_pal_hdr[i].num_pal; j++) {
                    FSeek(pc_img_hdr.pc_img_hdr[i].pc_img_pal_hdr[j].ofs_mip_dat[0] + (112 * i) + (112 * j));
                    struct {
                        local ubyte  k;
                        for (k = 0; k < pc_img_hdr.pc_img_hdr[i].pc_img_pal_hdr[j].num_mip; k++) {
                            FSeek(pc_img_hdr.pc_img_hdr[i].pc_img_pal_hdr[j].ofs_mip_dat[k] + (112 * i) + (112 * j) + (112 * k));  // counting from pc_img_hdr[i]
                            PcImgMipDat pc_img_mip_dat;
                        }
                    } pc_img_pal_dat;
                }
            } pc_img_dat;
        }
    } pc_img_dat;
};
