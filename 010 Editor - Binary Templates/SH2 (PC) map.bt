//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct FileHeader {
    uint32 magicByte;
    uint32 fileLength;
    uint32 subFileCount;
    uint32 unused;
};

struct SubFileHeader {
    uint32 subFileType;
    uint32 subFileLength;
    uint32 unused;
    uint32 unused;
};

struct TextureGroupSubFileHeader {
    uint32 magicByte;
    uint32 unused;
    uint32 unused;
    uint32 unknown;
};

struct BC_TextureHeader {
    uint32 textureId;
    uint16 width;
    uint16 height;
    uint16 width2;
    uint16 height2;
    uint32 spriteCount;
    uint16 unknown;
    uint16 textureId2;
    uint32 unused;
    uint32 unused;
    uint32 unused;
};

struct SpriteHeader {
    uint32 spriteId;
    uint16 x;
    uint16 y;
    uint16 width;
    uint16 height;
    uint32 format;
    uint32 pixelDataLength;
    uint32 pixelHeaderAndDataLength;
    uint32 unused;
    uint32 unknown;
};

struct FileHeader fileHeader;
struct SubFileHeader subFileHeader;
struct TextureGroupSubFileHeader textureGroupSubFileHeader;
struct BC_TextureHeader BCtextureheader;

local uint32 i;
for(i = 0; i < BCtextureheader.spriteCount; i++) {
    struct Sprite {
        struct SpriteHeader spriteHeader;
        byte pixels[spriteHeader.pixelDataLength];
    }sprite[BCtextureheader.spriteCount] <optimize=false>;
};


//struct SpriteHeader spriteHeader2;
//byte pixels2[spriteHeader2.pixelDataLength];

//local uint32 * pI = &i;
