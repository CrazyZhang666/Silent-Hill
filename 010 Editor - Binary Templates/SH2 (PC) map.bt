//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct FileHead {
    uint32 magicByte <format=hex>;
    uint32 fileLength;
    uint32 subFileCount;
    uint32 unused;
};

struct SubFileHead {
    enum subFileType sub_file_type;
    uint32 subFileLength;
    uint32 unused;
    uint32 unused;
};

enum subFileType
{
    geometry = 1,
    texture_group
};

struct TextureGroupSubFileHead {
    uint32 magicByte <format=hex>;
    uint32 unused;
    uint32 unused;
    uint32 unknown;
};

struct BC_TextureHead {
    uint32 textureId;
    uint16 width;
    uint16 height;
    uint16 width2;
    uint16 height2;
    uint32 spriteCount;
    uint16 unknown;
    uint16 unknown2;
    uint32 unused;
    uint32 unused;
    uint32 unused;
};

struct SpriteHead {
    uint32 spriteId;
    uint16 x;
    uint16 y;
    uint16 width;
    uint16 height;
    uint32 format;
    uint32 pixelDataLength;
    uint32 pixelHeadAndDataLength;
    uint32 unused;
    uint32 unknown;
};

struct Sprite {
    struct SpriteHead spriteHead;
    if (spriteHead.pixelDataLength > 0)
        byte pixels[spriteHead.pixelDataLength];
};

struct BCTexture {
    struct BC_TextureHead BC_texture_head;
    struct Sprite sprite[BC_texture_head.spriteCount] <optimize=false>;
};

struct TextureGroupSubFile {
    struct TextureGroupSubFileHead texture_group_sub_file_head;
    local int tmp;
    while (tmp = ReadInt())
        struct BCTexture BC_texture;
    uint32 pad[4]; 
};

//------------------------------------------------

struct GeometryGroupSubFileHead {
    uint32 magicByte <format=hex>;
    uint32 geometryCount;
    uint32 geometrySize;
    uint32 materialCount;
};

//------------------------------------------------

struct FileBody {
    struct SubFileHead sub_file_head;
    switch (sub_file_head.sub_file_type) {
        case 1 :
            struct GeometryGroupSubFileHead geometry_group_sub_file_head;
            break;
        case 2 :
            struct TextureGroupSubFile texture_group_sub_file;
            break;
    };
};

struct FileHead file_head;
struct FileBody file_body[file_head.subFileCount] <optimize=false>;

