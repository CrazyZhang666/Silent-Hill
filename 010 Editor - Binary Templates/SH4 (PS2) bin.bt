//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// local variables (used for parsing, and are not part of file format)
//------------------------------------------------

local uint32 local_ofs;
local uint32 k;
local uint16 temp0;
local uint16 temp1;

//------------------------------------------------
// parsing sequance (the acutal reading of a file)
//------------------------------------------------

uint32 num_block;
uint32 ofs_block[num_block];

for (k = 0; k < num_block; k++) {
    local_ofs = ofs_block[k];
    FSeek(ofs_block[k]);
    temp0 = ReadUShort();
    FSeek(ofs_block[k]+2);
    temp1 = ReadUShort();
    FSeek(ofs_block[k]);

    if (temp0 == temp1) { // texture block
        OffsetSetStart(FTell());
        struct {
            #include "SH4 (PS2) texture.bt"
        } img_block;
        OffsetClear();

    } else if (temp0 == 0x7000 && temp1 == 0x0FC0) { // shadow mesh block
        //#include "SH4 (PC) shadow mesh.bt"
        uint32 shadow_mesh_block;
    } else if (temp0 == 0xFF11) { // world collision mesh block
        uint32 world_collision_mesh_block;
    } else if (temp0 == 0x0003) { // character mesh block
        //#include "SH4 (PC) character mesh.bt" //need to debug
        uint32 character_mesh_block;
    } else if (temp0 == 0x8581) { // SDB file block
        uint32 SDB_file_block;
    } else if (temp0 == 0x4554) { // Monster ID list
        uint32 Monster_id_list;
    } else if (temp0 == 0x4C53) { // SLGT file block
        #include "SH4 (PC) SLGT.bt"
    } else if (temp0 == 0x0001 && temp1 == 0xFF01) { // animation block
        //#include "SH4 (PC) animation.bt" //need to debug
        uint32 animation_block;
    } else if (temp0 == 0x0001 && temp1 == 0xFC03) { // world mesh block
        #include "SH4 (PC) world mesh.bt"
    } else {
        uint32 unk_block;
    }
}
