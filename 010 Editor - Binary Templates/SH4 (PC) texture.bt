//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// simple structures (this is defining - not reading)
//------------------------------------------------

struct NumHdr {
    uint16 num_img;
    uint16 num_pal;
    uint32 unk0[3];
};

struct ImgHdr {
    uint32 w;
    uint32 h;
    ubyte  unk;
    ubyte  unk;
    uint16 unk;
    uint32 unk;
};

struct PalHdr {
    uint16 unk;
    uint16 num_tex;
    uint32 num_pal;
    uint32 unk;
    uint32 size_maybe;
};

struct DXTHdr {
    ubyte  unk0[32];
    uint32 w;
    uint32 h;
    ubyte  type[4];
    uint32 num_mipmap; // including original image
    ubyte  unk1[32];
    uint32 img_dat_ofs[7]; // counting from DXTHdr list
    uint32 unk2;
};

//------------------------------------------------
// complex structures
//------------------------------------------------

struct ImgBlock {
    NumHdr num_hdr;
    uint32 img_hdr_ofs[num_hdr.num_img];
    uint32 pal_hdr_ofs[num_hdr.num_pal];
    local uint16 i;
    for (i = 0; i < num_hdr.num_img; i++) {
        FSeek(img_hdr_ofs[i]);
        ImgHdr img_hdr;
    };
    for (i = 0; i < num_hdr.num_pal; i++) {
        FSeek(pal_hdr_ofs[i]);
        PalHdr pal_hdr;
    };
    OffsetSetStart(FTell());
    DXTHdr DXT_hdr[num_hdr.num_pal]; // unknown number
    
    local uint16 j;
    for (i = 0; i < num_hdr.num_pal; i++) {
        for (j = 0; j < 7; j++) {
            if (DXT_hdr[i].img_dat_ofs[j] > 0) {
                FSeek(DXT_hdr[i].img_dat_ofs[j]);
                uint32 img_start_TODO;
            }
        };
    };
};

//------------------------------------------------
// parsing sequance (the acutal reading of a file)
//------------------------------------------------

ImgBlock img_block;
