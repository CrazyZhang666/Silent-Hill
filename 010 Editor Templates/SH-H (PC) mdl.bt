//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct Header
{
    char magic[4];
    ubyte unk0[4];
    uint32 unk1;
    uint32 data_size;
};

struct TOC
{
    uint64 offset;
    uint32 byte_size;
    uint32 unk0;
    uint32 unk1;
};

struct FacesU32List
{
    uint32 tri_id_0;
    uint32 tri_id_1;
    uint32 tri_id_2;
};

struct FacesU16List
{
    uint16 tri_id_0;
    uint16 tri_id_1;
    uint16 tri_id_2;
};

struct MeshVerticesTable
{
    float vert_x;
    float vert_y;
    float vert_z;
    char unk0[4];
    char unk1[4];
    char unk2[4];
};

struct Names
{
    uint16 unkn;
    uint32 len;
    char name[len];
};

struct Header EIFF;
struct Header MODL;

ubyte unk0[24];
ubyte unk_FF[4];
uint unk_entries_count;
uint32 unk1;
uint32 unk2;
uint32 unk3;

struct TOC table_1;
struct TOC mats;
struct TOC table_2;
struct TOC faces;
struct TOC verts;
struct TOC unk_toc;

FSeek(table_1.offset);
char table1_data[table_1.byte_size];

FSeek(mats.offset);
char mats_data[mats.byte_size];

FSeek(table_2.offset);
uint32 second_table_entries;
uint32 faces_table_byte_size_2;
uint16 faces_table_u16_or_u32;
uint16 faces_table_list_or_strip;
uint32 vertices_table_byte_size_2;
uint32 vertices_table_byte_mode;
uint32 UVs_table_byte_size_2;
uint32 UVs_table_byte_mode;

FSeek(faces.offset);
if (faces_table_u16_or_u32 == 0 & faces_table_list_or_strip == 0)
    {
        struct FacesU32List faces_u32_list[faces.byte_size / 12];
    };

if (faces_table_u16_or_u32 == 256 & faces_table_list_or_strip == 0)
    {
        struct FacesU16List faces_u16_list[faces.byte_size / 6];
    };

if (faces_table_u16_or_u32 == 0 & faces_table_list_or_strip == 1)
    {
        uint32 faces_u32_strip[faces.byte_size / 4];
    };

if (faces_table_u16_or_u32 == 256 & faces_table_list_or_strip == 1)
    {
        uint16 faces_u16_strip[faces.byte_size / 2];
    };

FSeek(verts.offset);
//char verts_data[verts.byte_size];
struct MeshVerticesTable mesh_vertices_table[verts.byte_size / 24];

FSeek(unk_toc.offset);
char unk_data[unk_toc.byte_size];


FSeek(MODL.data_size + 32);
struct Header DPND;

uint32 count;
local int i;
for (i = 0; i < count; i++) {
    struct Names name;
};
