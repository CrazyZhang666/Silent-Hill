//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SH4 World Mesh
//   Authors: Hunter Stanton, roocker666, Sparagas
//   Purpose: A binary template for Silent Hill 4 PC world meshes (aka sgEMRenderModel). Intended for PC but might apply to Xbox and PS2.
//------------------------------------------------
typedef struct Vector4
{
float x;
float y;
float z;
float w;
} Vector4;

typedef struct FourByFourMatrix
{
Vector4 vector[4];
} fourByFourMatrix;

typedef struct DrawBlockParams
{
    // TODO: figure this out, this is presumably important in how these get drawn, perhaps it determines which shader to use and params passed to it or something?
    // this isn't really important for extracting the mesh though
    char unk[0x40];

    /*
    // data is from PS2 debug data, not applicable to PC due to how this is intended for DMAing to the PS2 GPU
    // leaving here for posterity
    int64 dma_tag;
	int64 part_giftag;
	unsigned long tex0;
	unsigned long clamp;
	unsigned int tex1;
	unsigned int alpha;
	unsigned int prim;
	unsigned int nb_parts;
    */
} drawBlockParams;

typedef struct Vertex
{
    float x;
    float y;
    float z;
    
    // seems to be vertex colors
    char r;
    char g;
    char b;
    char a;

    float u;
    float v;
};

typedef struct Part
{   
    local int start = FTell();
    char unk[0x20];
    int n_faces;
    int n_vertices;
    char unk2[0x40];
    int unk3;
    int unk4;
    int unk5;
    int faces_offset <format=hex>;
    int vertices_offset <format=hex>;
    int unk6;

    FSeek(start + faces_offset);
    short faces[n_faces];

    Vertex vertices[n_vertices];
};

typedef struct BoundingBox
{
    float bmin[4] <bgcolor=cGreen>;
	float bmax[4] <bgcolor=cGreen>; 
};

// assuming it is split like this because of 
typedef struct DrawBlock
{
    local int start = FTell();

	int next_block_offset <format=hex>;
	int params_offset <format=hex>;
	int parts_offset <format=hex>;
	short texture_id;
	short texture_bank; // not sure what this is considering the overwhelming majority of world meshes only have one single texture chunk
	byte clut_id;
    byte subtexture_id; // not 100% on this but it seems to line up?
	short palette_idx;
	int bounding_box_offset <format=hex>;
	short matrix_index;
	unsigned char backclip; // possibly related to backface culling?
	unsigned char pad0;
	int pad1;

    FSeek(start + bounding_box_offset);
    BoundingBox box;

    FSeek(start + params_offset);
    DrawBlockParams params;

    FSeek(start + parts_offset);
    Part part;
} drawBlock;

typedef struct DrawGroup
{
    local int start = FTell();
    local int i = 0;
    
	unsigned int n_blocks;
    if(n_blocks != 0)
    {
	unsigned int block_offsets[n_blocks] <format=hex>;

    for( i = 0; i < n_blocks; i++ )
        {
        FSeek(start + block_offsets[i]);
        DrawBlock block;
        }
    }
} drawGroup;

enum Version
{
    Prototype = 1, // seen in some test .bins included with the final game (iwa_teststage.bin for example). structure is very different due to being from an earlier version of the game, might be similar to SH3
    Prototype2 = 2, // closer to SH4's final version but not quite, found in the unused gtXX bin files and some others (this game has a *lot* of unused content, some of it still never seen before)
    Final = 3 // what is actually used in Silent Hill 4's final version
};

struct SGEMRenderModel {
    local int start = FTell();
    
	unsigned int type_id;
	Version version;
    if(version == Final)
    {
        // normal group = the main mesh
        // overdraw = mesh used for decals, shadows
        // transparency = meshes specifically intended to be transparent or see through (tree leaves, etc.)
        unsigned int normal_group_offset;
	    unsigned int overdraw_group_offset;
	    unsigned int transparency_group_offset;
	    unsigned int matrices_offset;
	    unsigned int n_matrices; // I am not sure this is really used anymore, even in very complex scenes only one matrix is present and the values are always [[1.0 0 0 0] [0 1.0 0 0] [0 0 1.0 0] [0 0 0 1.0]]
	    unsigned int additional_data;
	    unsigned int reserved_08;
	    unsigned int reserved_09;
	    unsigned int reserved_0a;
	    unsigned int reserved_0b;
	    unsigned int reserved_0c;
	    unsigned int reserved_0d;
	    unsigned int reserved_0e;
	    unsigned int reserved_0f;

        FSeek(start + matrices_offset);
        FourByFourMatrix matrices[n_matrices];

        if(normal_group_offset != 0)
        {
            FSeek(start + normal_group_offset);
            DrawGroup normalDrawGroup;
        }
    
        if(overdraw_group_offset != 0)
        {
            FSeek(start + overdraw_group_offset);
            DrawGroup overdrawDrawGroup;
        }
        } else {
            Warning("Error: Template does not support non-final versioned world meshes");
    }
} sgEMRenderModel;